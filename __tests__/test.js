import fs from 'fs'
import path, {resolve} from 'path'
import { stub } from 'sinon';
import { expect } from 'chai';
import WebpackCleanManifestPlugin from '../src/index';

const rootAssetPath = path.join(__dirname, 'assets/build/assets/js');
const manifestFile  = './__tests__/assets/build/rev-manifest.json';

describe('It cleans old files generated by webpack [name]-[hash:10]', function () {

    let unlinkSync;

    beforeEach(() => {
        unlinkSync = stub(fs, 'unlinkSync');
    });

    afterEach(() => {
        unlinkSync.restore();
    });

    test('It deletes all files that is not present in the manifest file', () => {

        let deletedFiles = WebpackCleanManifestPlugin(rootAssetPath, {
            manifest: manifestFile,
        }).callback();

        expect(unlinkSync).to.have.been.calledWith(`${rootAssetPath}/delete-me.js`);
        expect(unlinkSync).to.have.been.calledWith(`${rootAssetPath}/keep-me.js`);

        expect(deletedFiles).to.eql([
            resolve(path.join(rootAssetPath, 'delete-me.js')),
            resolve(path.join(rootAssetPath, 'keep-me.js')),
        ]);
    });

    test('It allows you to exclude files that otherwise would  be deleted', () => {

        let deletedFiles = WebpackCleanManifestPlugin(rootAssetPath, {
            manifest: manifestFile,
            exclude : [
                'keep-me.js'
            ]
        }).callback();

        expect(unlinkSync).to.have.been.calledWith(`${rootAssetPath}/delete-me.js`);
        expect(unlinkSync).to.not.been.calledWith(`${rootAssetPath}/keep-me.js`);

        expect(deletedFiles).to.eql([
            resolve(path.join(rootAssetPath, 'delete-me.js')),
        ]);
    });

    test('should not delete when previewing files', () => {

        WebpackCleanManifestPlugin(rootAssetPath, {
            manifest: manifestFile,
            preview: true
        }).callback();

        expect(unlinkSync).to.not.have.been.called;
    });
});
